{"version":3,"sources":["components/Header/index.tsx","utils/GradePointConverter.ts","utils/CourseInfo.ts","utils/SemestersAndYears.ts","utils/constants.ts","utils/processHTMLFile.ts","utils/GPA.ts","components/FileReader/index.tsx","components/Footer/index.tsx","components/ResultTab/index.tsx","components/ResultTabs/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Header","className","level2Point","level","score2Point","score","GradePointConvert2Score","gradePoint","CourseInfo","name","credit","initialSemester","passSemester","examSemesters","examYears","currentState","addedYear","examCount","this","year","includes","semester","slice","push","SemestersAndYears","Years","Semesters","addedYears","addedSemesters","QUALIFIED","processHTMLFile","HTMLString","semestersAndYears","addedCourses","rawScoreData","processHTMLString","dataTableToArray","textContent","replaceAll","trim","text","rawCourseName","test","dataTable","DOMParser","parseFromString","querySelector","querySelectorAll","forEach","subject","reExam","info","childNodes","length","isReExamCourse","getCleanText","getRealCourseName","parseFloat","parseInt","isNaN","examYear","addYear","addSemester","undefined","courseInfo","addExamYear","incrementExamCount","GradePointAverage","courses","coursesOfSemesters","coursesOfYears","phf","Courses","console","log","classifyCoursesBySemestersAndYears","totalCredits","totalCreditsMulGradePoint","totalCreditsMulScore","semesters","years","examAtThisSemester","cloneDeep","passedAtThisSemester","examAtThisYear","passedAtThisYear","result","gpa","wam","bySemester","byYear","getTotalGPA","getTotalWAM","semesterName","FileReaderComponent","setGPAData","useState","size","fileInfo","setFileInfo","setLoaded","setComputed","file","useRef","useEffect","message","type","id","ref","onChange","event","target","files","htmlFor","onClick","current","fileReader","FileReader","currentFile","readAsText","onloadend","evt","content","gpaAndWAM","success","error","alert","Footer","TabPane","Tabs","ResultTab","data","tabPositon","center","style","maxHeight","tabPosition","centered","height","map","tab","marginTop","marginBottom","toFixed","ResultTabs","gpaData","useContext","AppContext","width","minHeight","React","createContext","App","Provider","value","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.769c3aea.chunk.js","sourcesContent":["import \"./index.css\"\n\nconst Header = () => {\n  return <>\n    <div className={\"mt-7 font-semibold text-center text-4xl\"}>辽宁工程技术大学</div>\n    <div className={\"mt-3 font-semibold text-center text-4xl\"}>绩点计算器</div>\n  </>\n}\n\nexport default Header\n","export function level2Point(level: string) {\n  switch (level) {\n    case '优秀':\n      return 4.5\n    case '良':\n      return 3.5\n    case '合格':\n      return 3.5\n    case '中':\n      return 2.5\n    case '及格':\n      return 1.5\n    default:\n      return 0\n  }\n}\n\nexport function level2Score(level: string) {\n  switch (level) {\n    case '优秀':\n      return 95\n    case '良':\n      return 85\n    case '合格':\n      return 85\n    case '中':\n      return 75\n    case '及格':\n      return 65\n    default:\n      return 0\n  }\n}\n\nexport function score2Point(score: number) {\n  if (score >= 95) {\n    return 4.5\n  } else if (score >= 90) {\n    return 4.0\n  } else if (score >= 85) {\n    return 3.5\n  } else if (score >= 80) {\n    return 3.0\n  } else if (score >= 75) {\n    return 2.5\n  } else if (score >= 70) {\n    return 2.0\n  } else if (score >= 65) {\n    return 1.5\n  } else if (score >= 60) {\n    return 1.0\n  } else {\n    return 0\n  }\n}\n\nexport function GradePointConvert2Score(gradePoint: number) {\n  switch (gradePoint) {\n    case 4.5:\n      return 95\n    case 4:\n      return 90\n    case 3.5:\n      return 85\n    case 3:\n      return 80\n    case 2.5:\n      return 75\n    case 2:\n      return 70\n    case 1.5:\n      return 65\n    case 1.0:\n      return 60\n    default:\n      return 0\n  }\n}\n","import { StringSet } from './Types'\nexport class CourseInfo {\n  private addedYear: StringSet\n  public examCount: number\n\n  constructor(\n    public name: string,\n    public credit: number,\n    public score: number,\n    public gradePoint: number,\n    public initialSemester: string,\n    public passSemester: string,\n    public examSemesters: Array<string>,\n    public examYears: Array<string>,\n    public currentState: boolean\n  ) {\n    this.addedYear = {}\n    this.examCount = 0\n  }\n\n  examAtThisYear(year: string) {\n    return this.examYears.includes(year)\n  }\n\n  examAtThisSemester(semester: string) {\n    return this.examSemesters.includes(semester)\n  }\n\n  passedAtThisSemester(semester: string) {\n    return this.passSemester === semester\n  }\n\n  passedAtThisYear(year: string) {\n    return year === this.passSemester.slice(0, -2)\n  }\n\n  isPassed() {\n    return this.currentState\n  }\n\n  addExamYear(year: string) {\n    if (!this.addedYear[year]) {\n      this.examYears.push(year)\n      this.addedYear[year] = true\n    }\n  }\n\n  incrementExamCount() {\n    this.examCount += 1\n  }\n}\n","import { StringSet } from './Types'\n\nexport default class SemestersAndYears {\n  public Years: Array<string>\n  public Semesters: Array<string>\n  private addedYears: StringSet\n  private addedSemesters: StringSet\n  constructor() {\n    this.Years = []\n    this.Semesters = []\n    this.addedYears = {}\n    this.addedSemesters = {}\n  }\n\n  addYear(year: string) {\n    if (!this.addedYears[year]) {\n      this.Years.push(year)\n      this.addedYears[year] = true\n    }\n  }\n\n  addSemester(semester: string) {\n    if (!this.addedSemesters[semester]) {\n      this.Semesters.push(semester)\n      this.addedSemesters[semester] = true\n    }\n  }\n}\n","export const QUALIFIED = true\nexport const UNQUALIFIED = false\n","import {\n  score2Point,\n  level2Point,\n  GradePointConvert2Score,\n} from './GradePointConverter'\nimport { CourseInfo } from './CourseInfo'\nimport SemestersAndYears from './SemestersAndYears'\nimport { QUALIFIED, UNQUALIFIED } from './constants'\nimport { CourseMap } from './Types'\n\nexport default class processHTMLFile {\n  public semestersAndYears: SemestersAndYears\n  private addedCourses: CourseMap\n  private rawScoreData!: NodeListOf<HTMLTableRowElement>\n  constructor(HTMLString: string) {\n    this.processHTMLString(HTMLString)\n    this.semestersAndYears = new SemestersAndYears()\n    this.addedCourses = {}\n    this.dataTableToArray()\n  }\n\n  /**\n   * get course information\n   * @return {*|{}}\n   * @constructor\n   */\n  get Courses() {\n    return this.addedCourses\n  }\n\n  getRealCourseName(textContent: string) {\n    return textContent\n      .replaceAll('\\n', '')\n      .replaceAll('\\t', '')\n      .replaceAll(' (补考)', '')\n      .replaceAll(' (重学)', '')\n      .trim()\n  }\n\n  getCleanText(text: string) {\n    return text.replaceAll('\\n', '').replaceAll('\\t', '')\n  }\n\n  isReExamCourse(rawCourseName: string) {\n    return /补考/.test(rawCourseName)\n  }\n\n  isReStudyCourse(rawCourseName: string) {\n    return /重学/.test(rawCourseName)\n  }\n\n  processHTMLString(HTMLString: string) {\n    const dom = new DOMParser().parseFromString(HTMLString, 'text/html')\n    const dataTable = dom.querySelector('.grid table tbody')\n    this.rawScoreData = (dataTable as Element).querySelectorAll('tr')\n  }\n\n  dataTableToArray() {\n    this.rawScoreData.forEach((subject) => {\n      let info = subject.querySelectorAll('td')\n      // get state of a course\n      let reExam\n      if (info[3].childNodes.length > 1) {\n        reExam = this.isReExamCourse(\n          this.getCleanText(info[3].childNodes[1].textContent as string)\n        )\n      }\n      // get information of a course\n      let name = this.getRealCourseName(\n        info[3].childNodes[0].textContent as string\n      )\n      let semester = this.getCleanText(info[0].textContent as string)\n      let credit = parseFloat(this.getCleanText(info[5].textContent as string))\n      let score\n      let gradePoint\n      if (info.length > 13) {\n        // if one person has not passed courses, table structure is different from the others\n        score = parseInt(this.getCleanText(info[12].textContent as string))\n        gradePoint = score2Point(score)\n        let level = undefined\n        if (isNaN(score)) {\n          level = this.getCleanText(info[12].textContent as string)\n          gradePoint = level2Point(level)\n          score = GradePointConvert2Score(gradePoint)\n        }\n      } else {\n        // others who passed all courses\n        score = parseInt(this.getCleanText(info[10].textContent as string))\n        gradePoint = score2Point(score)\n        let level = undefined\n        if (isNaN(score)) {\n          level = this.getCleanText(info[10].textContent as string)\n          gradePoint = level2Point(level)\n          score = GradePointConvert2Score(gradePoint)\n        }\n      }\n\n      // year the exam have been taken\n      let examYear = semester.slice(0, -2)\n      this.semestersAndYears.addYear(examYear)\n      this.semestersAndYears.addSemester(semester)\n\n      // ensure the courses is unique\n      // read information about this course for the first time\n      if (this.addedCourses[name] === undefined) {\n        // successfully passed\n        let courseInfo = new CourseInfo(\n          name,\n          credit,\n          score,\n          gradePoint,\n          semester,\n          semester,\n          [semester],\n          [],\n          QUALIFIED\n        )\n        courseInfo.addExamYear(examYear)\n        // the first exam you taken\n        courseInfo.incrementExamCount()\n\n        if (score < 60) {\n          courseInfo.currentState = UNQUALIFIED\n          courseInfo.passSemester = ''\n        }\n        if (reExam) courseInfo.incrementExamCount()\n\n        this.addedCourses[name] = courseInfo\n      } else {\n        // read information about this course again\n        // should add exam DATE information\n        this.addedCourses[name].examSemesters.push(semester)\n        this.addedCourses[name].addExamYear(examYear)\n        // increment the exam count\n        this.addedCourses[name].incrementExamCount()\n\n        // you passed it\n        if (score >= 60) {\n          this.addedCourses[name].currentState = QUALIFIED\n          this.addedCourses[name].passSemester = semester\n          this.addedCourses[name].gradePoint = gradePoint\n        }\n\n        // update score\n        if (score >= this.addedCourses[name].score) {\n          this.addedCourses[name].score = score\n        }\n      }\n    })\n  }\n}\n","import processHTMLFile from './processHTMLFile'\nimport { QUALIFIED } from './constants'\nimport { CourseMap, ClassifiedCourses, ResultType } from './Types'\nimport SemestersAndYears from './SemestersAndYears'\nimport { cloneDeep } from 'lodash'\n\nexport default class GradePointAverage {\n  private courses: CourseMap\n  public semestersAndYears: SemestersAndYears\n  private coursesOfSemesters!: ClassifiedCourses\n  private coursesOfYears!: ClassifiedCourses\n  constructor(HTMLString: string) {\n    let phf = new processHTMLFile(HTMLString)\n    this.courses = phf.Courses\n    console.log(this.courses)\n    this.semestersAndYears = phf.semestersAndYears\n    this.classifyCoursesBySemestersAndYears(this.courses)\n  }\n\n  getTotalGPA(courses: CourseMap) {\n    let totalCredits = 0\n    let totalCreditsMulGradePoint = 0\n    for (const name in courses) {\n      totalCredits += courses[name].credit\n      let gradePoint = courses[name].gradePoint / courses[name].examCount\n      if (gradePoint < 1) gradePoint = 1\n      totalCreditsMulGradePoint += courses[name].credit * gradePoint\n    }\n    return totalCreditsMulGradePoint / totalCredits\n  }\n\n  getTotalWAM(courses: CourseMap) {\n    let totalCredits = 0\n    let totalCreditsMulScore = 0\n    for (const name in courses) {\n      totalCredits += courses[name].credit\n      totalCreditsMulScore += courses[name].credit * courses[name].score\n    }\n    return totalCreditsMulScore / totalCredits\n  }\n\n  classifyCoursesBySemestersAndYears(courses: CourseMap) {\n    const semesters = this.semestersAndYears.Semesters\n    const years = this.semestersAndYears.Years\n    this.coursesOfSemesters = {}\n    this.coursesOfYears = {}\n\n    for (const semester of semesters) {\n      this.coursesOfSemesters[semester] = {}\n      for (const name in courses) {\n        // exam at this semester\n        if (courses[name].examAtThisSemester(semester)) {\n          let courseInfo = cloneDeep(courses[name])\n          // if qualified and examCount greater than 2\n          if (\n            courseInfo.currentState === QUALIFIED &&\n            courseInfo.examCount > 2\n          ) {\n            if (!courseInfo.passedAtThisSemester(semester)) {\n              courseInfo.gradePoint = 0\n            }\n          }\n          this.coursesOfSemesters[semester][courseInfo.name] = courseInfo\n        }\n      }\n    }\n\n    for (const year of years) {\n      this.coursesOfYears[year] = {}\n      for (const name in courses) {\n        // exam at this year\n        if (courses[name].examAtThisYear(year)) {\n          let courseInfo = cloneDeep(courses[name])\n          // if qualified and examCount greater than 2\n          if (\n            courseInfo.currentState === QUALIFIED &&\n            courseInfo.examCount > 2\n          ) {\n            if (!courseInfo.passedAtThisYear(year)) {\n              courseInfo.gradePoint = 0\n            }\n          }\n          this.coursesOfYears[year][courseInfo.name] = courseInfo\n        }\n      }\n    }\n  }\n\n  get gpaAndWAM() {\n    let result: ResultType = {\n      gpa: 0,\n      wam: 0,\n      bySemester: [],\n      byYear: [],\n    }\n    result.byYear = []\n    result.bySemester = []\n    result.gpa = this.getTotalGPA(this.courses)\n    result.wam = this.getTotalWAM(this.courses)\n    for (const semester in this.coursesOfSemesters) {\n      result.bySemester.push({\n        semesterName: semester.replaceAll(' 1', ' 秋').replaceAll(' 2', ' 春'),\n        gpa: this.getTotalGPA(this.coursesOfSemesters[semester]),\n        wam: this.getTotalWAM(this.coursesOfSemesters[semester]),\n      })\n    }\n    for (const year in this.coursesOfYears) {\n      result.byYear.push({\n        year,\n        gpa: this.getTotalGPA(this.coursesOfYears[year]),\n        wam: this.getTotalWAM(this.coursesOfYears[year]),\n      })\n    }\n    return result\n  }\n}\n","import { useEffect, useRef, useState } from 'react'\nimport { message } from 'antd'\nimport './index.css'\nimport GradePointAverage from '../../utils/GPA'\nimport { ResultType } from '../../utils/Types'\n\ninterface FRCprops {\n  setGPAData: React.Dispatch<React.SetStateAction<ResultType | undefined>>\n}\n\nconst FileReaderComponent: React.FC<FRCprops> = ({ setGPAData }) => {\n  const [fileInfo, setFileInfo] = useState({\n    name: '',\n    size: '',\n  })\n  // eslint-disable-next-line\n  const [loaded, setLoaded] = useState(false)\n  // eslint-disable-next-line\n  const [computed, setComputed] = useState(false)\n\n  const file = useRef<HTMLInputElement | null>(null)\n\n  useEffect(() => {\n    if (fileInfo.size !== '') {\n      message.info(\"文件已加载\");\n      setGPAData(undefined)\n      setLoaded(true)\n      setComputed(false)\n    }\n    // eslint-disable-next-line\n  }, [fileInfo])\n\n  //   const GPAStat = useContext(AppContext)\n\n  const calculate = () => {\n    if (file.current?.files) {\n      if (!file.current.files[0]) {\n        alert('请选择文件')\n        return\n      }\n    }\n    \n    let fileReader = new FileReader()\n    const currentFile = file?.current?.files![0]\n    fileReader.readAsText(currentFile as File, 'utf-8')\n    fileReader.onloadend = function (evt) {\n      // 在文件读取完毕后，其内容将被保存在result属性中\n      const content = evt.target!.result\n      try {\n        const gpa = new GradePointAverage(content as string)\n        setGPAData(gpa.gpaAndWAM)\n        setComputed(true)\n        message.success(\"计算成功\")\n      } catch (error) {\n        // alert('文件格式错误或内容异常，请重新选择')\n        message.error(\"文件格式错误或内容异常，请重新选择\")\n        console.log(error)\n        setComputed(false)\n        setLoaded(false)\n      }\n    }\n  }\n\n  return (\n    <>\n      <div className={'fileReader'}>\n        <input\n          type=\"file\"\n          name=\"file\"\n          id=\"file\"\n          className={'hidden'}\n          ref={file}\n          onChange={(event) => {\n            setFileInfo({\n              name: event.target.files![0].name || '',\n              size: event.target.files![0].size + ' Bytes' || '',\n            })\n          }}\n        />\n        <label htmlFor=\"file\" className={'Btn selectBtn'}>\n          选择文件\n        </label>\n        <label className={'Btn calculateBtn'} onClick={calculate}>\n          计算成绩{' '}\n        </label>\n      </div>\n    </>\n  )\n}\n\nexport default FileReaderComponent\n","import \"./index.css\"\nconst Footer = () => {\n  return <>\n    <div className={\"footer\"}>\n      <p className={\"footer-item\"}>Contributors:</p>\n      <p className={\"footer-item\"}>Freesia hybrida Klatt, Software College</p>\n      <p className={\"footer-item\"}>Deep Dark Cat, Software College</p>\n    </div>\n  </>\n}\n\nexport default Footer\n","import React from 'react'\nimport { Tabs } from 'antd'\nconst { TabPane } = Tabs\n\ninterface ResultTabProps {\n  data: Array<Record<string, any>>\n  type: '学年' | '学期'\n  tabPositon?: 'top' | 'left'\n  center?: boolean\n}\n\nconst ResultTab: React.FC<ResultTabProps> = ({\n  data,\n  type,\n  tabPositon,\n  center\n}) => {\n  return (\n    <div style={{ maxHeight: '250px' }}>\n      <Tabs\n        tabPosition={tabPositon ?? 'left'}\n        centered={center}\n        style={{ height: 200 }}\n      >\n        {data.map(result => {\n          return (\n            <TabPane\n              tab={result['year'] ?? result['semesterName']}\n              key={result['wam']}\n            >\n              {/* <ResultItem type={type} gpa={result['gpa'].toFixed(4)} wam={result['wam'].toFixed(4)}/> */}\n              <div\n                className={'mx-auto text-center w-full'}\n                style={{\n                  height: '200px'\n                }}\n              >\n                <div\n                  className='my-auto'\n                  style={{\n                    marginTop: '50px',\n                    marginBottom: '20px'\n                  }}\n                >\n                  <h2>平均绩点: {result['gpa'].toFixed(4)}</h2>\n                  <h2>加权平均分: {result['wam'].toFixed(4)}</h2>\n                </div>\n              </div>\n            </TabPane>\n          )\n        })}\n      </Tabs>\n    </div>\n  )\n}\n\nexport default ResultTab\n","import React, { useContext } from 'react'\nimport { Tabs } from 'antd'\n\n\nimport { AppContext } from '../../App'\nimport ResultTab from '../ResultTab'\n\nconst { TabPane } = Tabs\n\ninterface ResultTabProps {}\n\nconst ResultTabs: React.FC<ResultTabProps> = () => {\n  const gpaData = useContext(AppContext)\n\n  return (\n    <div className={'mx-auto my-0'} style={{ width: '580px', minHeight: \"270px\" }}>\n      <Tabs centered>\n        <TabPane tab='总计' key={1}>\n          <div className={'mx-auto text-center w-full'}>\n            <div className='my-auto'>\n              <h2>平均绩点: {gpaData?.gpa.toFixed(4)}</h2>\n              <h2>加权平均分: {gpaData?.wam.toFixed(4)}</h2>\n            </div>\n          </div>\n        </TabPane>\n        <TabPane tab='学期' key={2}>\n          <ResultTab\n            tabPositon='top'\n            center\n            data={gpaData!.bySemester}\n            type={'学期'}\n          />\n        </TabPane>\n        <TabPane tab='学年' key={3}>\n          <ResultTab\n            tabPositon='top'\n            data={gpaData!.byYear}\n            type={'学年'}\n            center\n          />\n        </TabPane>\n      </Tabs>\n    </div>\n  )\n}\n\nexport default ResultTabs\n","import React, { useState } from 'react'\n// import ResultList from './components/ResultList'\nimport './App.css'\nimport Header from './components/Header'\nimport FileReader from './components/FileReader'\nimport Footer from './components/Footer'\nimport { ResultType } from './utils/Types'\nimport ResultTabs from './components/ResultTabs'\nimport { Button } from 'antd'\n\nexport const AppContext = React.createContext<ResultType | undefined>({\n  gpa: 0,\n  wam: 0,\n  bySemester: [],\n  byYear: []\n})\n\nfunction App () {\n  const [gpaData, setGPAData] = useState<ResultType | undefined>(undefined)\n  // console.log(gpaData)\n  return (\n    <AppContext.Provider value={gpaData}>\n      <div>\n        <Header />\n        <div className={'readme'}>\n          <Button type='link' href='https://gpahelp.xcland.tech/'>使用指北</Button>\n        </div>\n        <FileReader setGPAData={setGPAData} />\n        {/* <ResultList /> */}\n        {gpaData ? <ResultTabs /> : null}\n        {!gpaData ? <Footer /> : null}\n      </div>\n    </AppContext.Provider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}