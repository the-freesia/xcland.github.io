{"version":3,"sources":["components/ResultItem/index.tsx","components/ResultList/index.tsx","components/Header/index.tsx","utils/GradePointConverter.ts","utils/CourseInfo.ts","utils/SemestersAndYears.ts","utils/constants.ts","utils/processHTMLFile.ts","utils/GPA.ts","components/FileReader/index.tsx","components/Footer/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ResultItem","props","type","title","gpa","wam","className","ResultList","gpaData","useContext","AppContext","toFixed","undefined","byYear","map","year","bySemester","semester","semesterName","Header","level2Point","level","score2Point","score","GradePointConvert2Score","gradePoint","CourseInfo","name","credit","initialSemester","passSemester","examSemesters","examYears","currentState","addedYear","examCount","this","includes","slice","push","SemestersAndYears","Years","Semesters","addedYears","addedSemesters","QUALIFIED","processHTMLFile","HTMLString","semestersAndYears","addedCourses","rawScoreData","processHTMLString","dataTableToArray","textContent","replaceAll","trim","text","rawCourseName","test","dataTable","DOMParser","parseFromString","querySelector","querySelectorAll","forEach","subject","reExam","info","childNodes","length","isReExamCourse","getCleanText","getRealCourseName","parseFloat","parseInt","isNaN","examYear","addYear","addSemester","courseInfo","addExamYear","incrementExamCount","GradePointAverage","courses","coursesOfSemesters","coursesOfYears","phf","Courses","console","log","classifyCoursesBySemestersAndYears","totalCredits","totalCreditsMulGradePoint","totalCreditsMulScore","semesters","years","examAtThisSemester","cloneDeep","passedAtThisSemester","examAtThisYear","passedAtThisYear","result","getTotalGPA","getTotalWAM","FileReaderComponent","setGPAData","useState","size","fileInfo","setFileInfo","loaded","setLoaded","computed","setComputed","file","useRef","useEffect","id","ref","onChange","event","target","files","htmlFor","onClick","current","fileReader","FileReader","currentFile","readAsText","onloadend","evt","content","gpaAndWAM","error","alert","Footer","React","createContext","App","Provider","value","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kVAuBeA,EAduB,SAACC,GAErC,IAAQC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,MAAOC,EAAaH,EAAbG,IAAKC,EAAQJ,EAARI,IAC1B,OACE,sBAAKC,UAAW,aAAhB,UACE,oBAAGA,UAAW,aAAd,UACGJ,EADH,IACUC,KAEV,oBAAGG,UAAW,WAAd,uCAAiCF,KACjC,oBAAGE,UAAW,WAAd,6CAAkCD,SCsCzBE,G,MAnDI,SAACN,GAClB,IAAMO,EAAUC,qBAAWC,GAE3B,OACE,qCACE,qBAAKJ,UAAW,gBAAhB,SACmB,IAAhBE,EAAQJ,IACP,cAAC,EAAD,CACEF,KAAM,eACNC,MAAM,GACNC,IAAKI,EAAQJ,IAAIO,QAAQ,GACzBN,IAAKG,EAAQH,IAAIM,QAAQ,KAG3B,KAGJ,qBAAKL,UAAW,gBAAhB,cACsBM,IAAnBJ,EAAQK,OACLL,EAAQK,OAAOC,KAAI,SAACC,GAClB,OACE,cAAC,EAAD,CAEEb,KAAM,eACNC,MAAOY,EAAKA,KACZX,IAAKW,EAAKX,IAAIO,QAAQ,GACtBN,IAAKU,EAAKV,IAAIM,QAAQ,IAJjBI,EAAKX,QAQhB,KAEN,qBAAKE,UAAW,gBAAhB,cAC0BM,IAAvBJ,EAAQQ,WACLR,EAAQQ,WAAWF,KAAI,SAACG,GACtB,OACE,cAAC,EAAD,CAEEf,KAAM,eACNC,MAAOc,EAASC,aAChBd,IAAKa,EAASb,IAAIO,QAAQ,GAC1BN,IAAKY,EAASZ,IAAIM,QAAQ,IAJrBM,EAASb,QAQpB,UC5CGe,G,YAJA,WACb,OAAO,oBAAIb,UAAW,SAAf,mC,6BCHF,SAASc,EAAYC,GAC1B,OAAQA,GACN,IAAK,eACH,OAAO,IACT,IAAK,SAEL,IAAK,eACH,OAAO,IACT,IAAK,SACH,OAAO,IACT,IAAK,eACH,OAAO,IACT,QACE,OAAO,GAqBN,SAASC,EAAYC,GAC1B,OAAIA,GAAS,GACJ,IACEA,GAAS,GACX,EACEA,GAAS,GACX,IACEA,GAAS,GACX,EACEA,GAAS,GACX,IACEA,GAAS,GACX,EACEA,GAAS,GACX,IACEA,GAAS,GACX,EAEA,EAIJ,SAASC,EAAwBC,GACtC,OAAQA,GACN,KAAK,IACH,OAAO,GACT,KAAK,EACH,OAAO,GACT,KAAK,IACH,OAAO,GACT,KAAK,EACH,OAAO,GACT,KAAK,IACH,OAAO,GACT,KAAK,EACH,OAAO,GACT,KAAK,IACH,OAAO,GACT,KAAK,EACH,OAAO,GACT,QACE,OAAO,GC1EN,IAAMC,EAAb,WAIE,WACSC,EACAC,EACAL,EACAE,EACAI,EACAC,EACAC,EACAC,EACAC,GACN,yBATMN,OASP,KAROC,SAQP,KAPOL,QAOP,KANOE,aAMP,KALOI,kBAKP,KAJOC,eAIP,KAHOC,gBAGP,KAFOC,YAEP,KADOC,eACP,KAbMC,eAaN,OAZKC,eAYL,EACAC,KAAKF,UAAY,GACjBE,KAAKD,UAAY,EAhBrB,kDAmBE,SAAepB,GACb,OAAOqB,KAAKJ,UAAUK,SAAStB,KApBnC,gCAuBE,SAAmBE,GACjB,OAAOmB,KAAKL,cAAcM,SAASpB,KAxBvC,kCA2BE,SAAqBA,GACnB,OAAOmB,KAAKN,eAAiBb,IA5BjC,8BA+BE,SAAiBF,GACf,OAAOA,IAASqB,KAAKN,aAAaQ,MAAM,GAAI,KAhChD,sBAmCE,WACE,OAAOF,KAAKH,eApChB,yBAuCE,SAAYlB,GACLqB,KAAKF,UAAUnB,KAClBqB,KAAKJ,UAAUO,KAAKxB,GACpBqB,KAAKF,UAAUnB,IAAQ,KA1C7B,gCA8CE,WACEqB,KAAKD,WAAa,MA/CtB,KCCqBK,E,WAKnB,aAAe,yBAJRC,WAIO,OAHPC,eAGO,OAFNC,gBAEM,OADNC,oBACM,EACZR,KAAKK,MAAQ,GACbL,KAAKM,UAAY,GACjBN,KAAKO,WAAa,GAClBP,KAAKQ,eAAiB,G,2CAGxB,SAAQ7B,GACDqB,KAAKO,WAAW5B,KACnBqB,KAAKK,MAAMF,KAAKxB,GAChBqB,KAAKO,WAAW5B,IAAQ,K,yBAI5B,SAAYE,GACLmB,KAAKQ,eAAe3B,KACvBmB,KAAKM,UAAUH,KAAKtB,GACpBmB,KAAKQ,eAAe3B,IAAY,O,KCxBzB4B,GAAY,ECUJC,E,WAInB,WAAYC,GAAqB,yBAH1BC,uBAGyB,OAFxBC,kBAEwB,OADxBC,kBACwB,EAC9Bd,KAAKe,kBAAkBJ,GACvBX,KAAKY,kBAAoB,IAAIR,EAC7BJ,KAAKa,aAAe,GACpBb,KAAKgB,mB,yCAQP,WACE,OAAOhB,KAAKa,e,+BAGd,SAAkBI,GAChB,OAAOA,EACJC,WAAW,KAAM,IACjBA,WAAW,KAAM,IACjBA,WAAW,kBAAS,IACpBA,WAAW,kBAAS,IACpBC,S,0BAGL,SAAaC,GACX,OAAOA,EAAKF,WAAW,KAAM,IAAIA,WAAW,KAAM,M,4BAGpD,SAAeG,GACb,MAAO,eAAKC,KAAKD,K,6BAGnB,SAAgBA,GACd,MAAO,eAAKC,KAAKD,K,+BAGnB,SAAkBV,GAChB,IACMY,GADM,IAAIC,WAAYC,gBAAgBd,EAAY,aAClCe,cAAc,qBACpC1B,KAAKc,aAAgBS,EAAsBI,iBAAiB,Q,8BAG9D,WAAoB,IAAD,OACjB3B,KAAKc,aAAac,SAAQ,SAACC,GACzB,IAEIC,EAFAC,EAAOF,EAAQF,iBAAiB,MAGhCI,EAAK,GAAGC,WAAWC,OAAS,IAC9BH,EAAS,EAAKI,eACZ,EAAKC,aAAaJ,EAAK,GAAGC,WAAW,GAAGf,eAI5C,IAKI9B,EACAE,EANAE,EAAO,EAAK6C,kBACdL,EAAK,GAAGC,WAAW,GAAGf,aAEpBpC,EAAW,EAAKsD,aAAaJ,EAAK,GAAGd,aACrCzB,EAAS6C,WAAW,EAAKF,aAAaJ,EAAK,GAAGd,cAGlD,GAAIc,EAAKE,OAAS,GAAI,CAGpB5C,EAAaH,EADbC,EAAQmD,SAAS,EAAKH,aAAaJ,EAAK,IAAId,eAGxCsB,MAAMpD,KAGRA,EAAQC,EADRC,EAAaL,EADL,EAAKmD,aAAaJ,EAAK,IAAId,oBAIhC,CAGL5B,EAAaH,EADbC,EAAQmD,SAAS,EAAKH,aAAaJ,EAAK,IAAId,eAGxCsB,MAAMpD,KAGRA,EAAQC,EADRC,EAAaL,EADL,EAAKmD,aAAaJ,EAAK,IAAId,gBAOvC,IAAIuB,EAAW3D,EAASqB,MAAM,GAAI,GAMlC,GALA,EAAKU,kBAAkB6B,QAAQD,GAC/B,EAAK5B,kBAAkB8B,YAAY7D,QAIHL,IAA5B,EAAKqC,aAAatB,GAAqB,CAEzC,IAAIoD,EAAa,IAAIrD,EACnBC,EACAC,EACAL,EACAE,EACAR,EACAA,EACA,CAACA,GACD,GACA4B,GAEFkC,EAAWC,YAAYJ,GAEvBG,EAAWE,qBAEP1D,EAAQ,KACVwD,EAAW9C,aDzHM,MC0HjB8C,EAAWjD,aAAe,IAExBoC,GAAQa,EAAWE,qBAEvB,EAAKhC,aAAatB,GAAQoD,OAI1B,EAAK9B,aAAatB,GAAMI,cAAcQ,KAAKtB,GAC3C,EAAKgC,aAAatB,GAAMqD,YAAYJ,GAEpC,EAAK3B,aAAatB,GAAMsD,qBAGpB1D,GAAS,KACX,EAAK0B,aAAatB,GAAMM,aAAeY,EACvC,EAAKI,aAAatB,GAAMG,aAAeb,EACvC,EAAKgC,aAAatB,GAAMF,WAAaA,GAInCF,GAAS,EAAK0B,aAAatB,GAAMJ,QACnC,EAAK0B,aAAatB,GAAMJ,MAAQA,U,YC3IrB2D,E,WAKnB,WAAYnC,GAAqB,yBAJzBoC,aAIwB,OAHzBnC,uBAGyB,OAFxBoC,wBAEwB,OADxBC,oBACwB,EAC9B,IAAIC,EAAM,IAAIxC,EAAgBC,GAC9BX,KAAK+C,QAAUG,EAAIC,QACnBC,QAAQC,IAAIrD,KAAK+C,SACjB/C,KAAKY,kBAAoBsC,EAAItC,kBAC7BZ,KAAKsD,mCAAmCtD,KAAK+C,S,+CAG/C,SAAYA,GACV,IAAIQ,EAAe,EACfC,EAA4B,EAChC,IAAK,IAAMjE,KAAQwD,EAAS,CAC1BQ,GAAgBR,EAAQxD,GAAMC,OAC9B,IAAIH,EAAa0D,EAAQxD,GAAMF,WAAa0D,EAAQxD,GAAMQ,UACtDV,EAAa,IAAGA,EAAa,GACjCmE,GAA6BT,EAAQxD,GAAMC,OAASH,EAEtD,OAAOmE,EAA4BD,I,yBAGrC,SAAYR,GACV,IAAIQ,EAAe,EACfE,EAAuB,EAC3B,IAAK,IAAMlE,KAAQwD,EACjBQ,GAAgBR,EAAQxD,GAAMC,OAC9BiE,GAAwBV,EAAQxD,GAAMC,OAASuD,EAAQxD,GAAMJ,MAE/D,OAAOsE,EAAuBF,I,gDAGhC,SAAmCR,GACjC,IAAMW,EAAY1D,KAAKY,kBAAkBN,UACnCqD,EAAQ3D,KAAKY,kBAAkBP,MACrCL,KAAKgD,mBAAqB,GAC1BhD,KAAKiD,eAAiB,GAJ+B,oBAM9BS,GAN8B,IAMrD,2BAAkC,CAAC,IAAxB7E,EAAuB,QAEhC,IAAK,IAAMU,KADXS,KAAKgD,mBAAmBnE,GAAY,GACjBkE,EAEjB,GAAIA,EAAQxD,GAAMqE,mBAAmB/E,GAAW,CAC9C,IAAI8D,EAAakB,oBAAUd,EAAQxD,IAGjCoD,EAAW9C,eAAiBY,GAC5BkC,EAAW5C,UAAY,IAElB4C,EAAWmB,qBAAqBjF,KACnC8D,EAAWtD,WAAa,IAG5BW,KAAKgD,mBAAmBnE,GAAU8D,EAAWpD,MAAQoD,IArBN,kDA0BlCgB,GA1BkC,IA0BrD,2BAA0B,CAAC,IAAhBhF,EAAe,QAExB,IAAK,IAAMY,KADXS,KAAKiD,eAAetE,GAAQ,GACToE,EAEjB,GAAIA,EAAQxD,GAAMwE,eAAepF,GAAO,CACtC,IAAIgE,EAAakB,oBAAUd,EAAQxD,IAGjCoD,EAAW9C,eAAiBY,GAC5BkC,EAAW5C,UAAY,IAElB4C,EAAWqB,iBAAiBrF,KAC/BgE,EAAWtD,WAAa,IAG5BW,KAAKiD,eAAetE,GAAMgE,EAAWpD,MAAQoD,IAzCE,iC,qBA+CvD,WACE,IAAIsB,EAAqB,CACvBjG,IAAK,EACLC,IAAK,EACLW,WAAY,GACZH,OAAQ,IAMV,IAAK,IAAMI,KAJXoF,EAAOxF,OAAS,GAChBwF,EAAOrF,WAAa,GACpBqF,EAAOjG,IAAMgC,KAAKkE,YAAYlE,KAAK+C,SACnCkB,EAAOhG,IAAM+B,KAAKmE,YAAYnE,KAAK+C,SACZ/C,KAAKgD,mBAC1BiB,EAAOrF,WAAWuB,KAAK,CACrBrB,aAAcD,EAASqC,WAAW,KAAM,WAAMA,WAAW,KAAM,WAC/DlD,IAAKgC,KAAKkE,YAAYlE,KAAKgD,mBAAmBnE,IAC9CZ,IAAK+B,KAAKmE,YAAYnE,KAAKgD,mBAAmBnE,MAGlD,IAAK,IAAMF,KAAQqB,KAAKiD,eACtBgB,EAAOxF,OAAO0B,KAAK,CACjBxB,OACAX,IAAKgC,KAAKkE,YAAYlE,KAAKiD,eAAetE,IAC1CV,IAAK+B,KAAKmE,YAAYnE,KAAKiD,eAAetE,MAG9C,OAAOsF,M,KCtBIG,EAlFiC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACjD,EAAgCC,mBAAS,CACvC/E,KAAM,GACNgF,KAAM,KAFR,mBAAOC,EAAP,KAAiBC,EAAjB,KAKA,EAA4BH,oBAAS,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAgCL,oBAAS,GAAzC,mBAAOM,EAAP,KAAiBC,EAAjB,KAEMC,EAAOC,iBAAgC,MAE7CC,qBAAU,WACc,KAAlBR,EAASD,OACXI,GAAU,GACVE,GAAY,MAEb,CAACL,IA8BJ,OACE,qCACE,sBAAKtG,UAAW,aAAhB,UACE,uBACEJ,KAAK,OACLyB,KAAK,OACL0F,GAAG,OACH/G,UAAW,SACXgH,IAAKJ,EACLK,SAAU,SAACC,GACTX,EAAY,CACVlF,KAAM6F,EAAMC,OAAOC,MAAO,GAAG/F,MAAQ,GACrCgF,KAAMa,EAAMC,OAAOC,MAAO,GAAGf,KAAO,WAAY,OAItD,uBAAOgB,QAAQ,OAAOrH,UAAW,gBAAjC,sCAGA,wBAAOA,UAAW,mBAAoBsH,QA7C1B,WAAO,IAAD,IACtB,eAAIV,EAAKW,eAAT,aAAI,EAAcH,QACXR,EAAKW,QAAQH,MAAM,GAD1B,CAMAT,GAAY,GACZ,IAAIa,EAAa,IAAIC,WACfC,EAAW,OAAGd,QAAH,IAAGA,GAAH,UAAGA,EAAMW,eAAT,aAAG,EAAeH,MAAO,GAC1CI,EAAWG,WAAWD,EAAqB,SAC3CF,EAAWI,UAAY,SAAUC,GAE/B,IAAMC,EAAUD,EAAIV,OAAQpB,OAC5B,IACE,IAAMjG,EAAM,IAAI8E,EAAkBkD,GAClC3B,EAAWrG,EAAIiI,WACf,MAAOC,GACPC,MAAM,0GACN/C,QAAQC,IAAI6C,GACZrB,GAAY,GACZF,GAAU,UAlBVwB,MAAM,mCA0CN,qCACO,UAGRzB,EACC,qBAAKxG,UAAU,SAAf,SACE,mBAAGA,UAAW,cAAd,SACG0G,EAAW,uCAAW,qCAI3B,OCzEOwB,G,MAXA,WACb,OAAO,mCACL,sBAAKlI,UAAW,SAAhB,UACE,mBAAGA,UAAW,cAAd,uCACA,mBAAGA,UAAW,cAAd,2CACA,mBAAGA,UAAW,cAAd,2CACA,mBAAGA,UAAW,cAAd,sFCCOI,EAAa+H,IAAMC,cAA0B,CACxDtI,IAAK,EACLC,IAAK,EACLW,WAAY,GACZH,OAAQ,KA0BK8H,MAvBf,WACE,MAA8BjC,mBAAqB,CACjDtG,IAAK,EACLC,IAAK,EACLW,WAAY,GACZH,OAAQ,KAJV,mBAAOL,EAAP,KAAgBiG,EAAhB,KAOA,OACE,cAAC/F,EAAWkI,SAAZ,CAAqBC,MAAOrI,EAA5B,SACE,gCACE,cAAC,EAAD,IACA,mBAAGF,UAAW,SAAd,SACE,mBAAGwI,KAAK,+BAAR,wCAEF,cAAC,EAAD,CAAYrC,WAAYA,IACxB,cAAC,EAAD,IACA,cAAC,EAAD,UCpBOsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.75d8a5fa.chunk.js","sourcesContent":["import './index.css'\r\n\r\ninterface RIprops {\r\n  type: string\r\n  title?: string\r\n  gpa: string\r\n  wam: string\r\n}\r\n\r\nconst ResultItem: React.FC<RIprops> = (props) => {\r\n  // console.log(props);\r\n  const { type, title, gpa, wam } = props\r\n  return (\r\n    <div className={'resultCard'}>\r\n      <p className={'item-title'}>\r\n        {type}:{title}\r\n      </p>\r\n      <p className={'item-gpa'}>平均绩点: {gpa}</p>\r\n      <p className={'item-wam'}>加权平均分: {wam}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResultItem\r\n","import { useContext } from 'react'\r\nimport { AppContext } from '../../App'\r\nimport ResultItem from '../ResultItem'\r\nimport './index.css'\r\n\r\nconst ResultList = (props: any) => {\r\n  const gpaData = useContext(AppContext)\r\n  // console.log(\"Result List\",gpaData)\r\n  return (\r\n    <>\r\n      <div className={'listContainer'}>\r\n        {gpaData.gpa !== 0 ? (\r\n          <ResultItem\r\n            type={'总计'}\r\n            title=\"\"\r\n            gpa={gpaData.gpa.toFixed(4)}\r\n            wam={gpaData.wam.toFixed(4)}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n      <div className={'listContainer'}>\r\n        {gpaData.byYear !== undefined\r\n          ? gpaData.byYear.map((year) => {\r\n              return (\r\n                <ResultItem\r\n                  key={year.gpa}\r\n                  type={'学年'}\r\n                  title={year.year}\r\n                  gpa={year.gpa.toFixed(4)}\r\n                  wam={year.wam.toFixed(4)}\r\n                />\r\n              )\r\n            })\r\n          : ''}\r\n      </div>\r\n      <div className={'listContainer'}>\r\n        {gpaData.bySemester !== undefined\r\n          ? gpaData.bySemester.map((semester) => {\r\n              return (\r\n                <ResultItem\r\n                  key={semester.gpa}\r\n                  type={'学期'}\r\n                  title={semester.semesterName}\r\n                  gpa={semester.gpa.toFixed(4)}\r\n                  wam={semester.wam.toFixed(4)}\r\n                />\r\n              )\r\n            })\r\n          : ''}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResultList\r\n","import \"./index.css\"\r\n\r\nconst Header = () => {\r\n  return <h1 className={\"header\"}>LNTU GPA Calculator</h1>\r\n}\r\n\r\nexport default Header\r\n","export function level2Point(level: string) {\r\n  switch (level) {\r\n    case '优秀':\r\n      return 4.5\r\n    case '良':\r\n      return 3.5\r\n    case '合格':\r\n      return 3.5\r\n    case '中':\r\n      return 2.5\r\n    case '及格':\r\n      return 1.5\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nexport function level2Score(level: string) {\r\n  switch (level) {\r\n    case '优秀':\r\n      return 95\r\n    case '良':\r\n      return 85\r\n    case '合格':\r\n      return 85\r\n    case '中':\r\n      return 75\r\n    case '及格':\r\n      return 65\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nexport function score2Point(score: number) {\r\n  if (score >= 95) {\r\n    return 4.5\r\n  } else if (score >= 90) {\r\n    return 4.0\r\n  } else if (score >= 85) {\r\n    return 3.5\r\n  } else if (score >= 80) {\r\n    return 3.0\r\n  } else if (score >= 75) {\r\n    return 2.5\r\n  } else if (score >= 70) {\r\n    return 2.0\r\n  } else if (score >= 65) {\r\n    return 1.5\r\n  } else if (score >= 60) {\r\n    return 1.0\r\n  } else {\r\n    return 0\r\n  }\r\n}\r\n\r\nexport function GradePointConvert2Score(gradePoint: number) {\r\n  switch (gradePoint) {\r\n    case 4.5:\r\n      return 95\r\n    case 4:\r\n      return 90\r\n    case 3.5:\r\n      return 85\r\n    case 3:\r\n      return 80\r\n    case 2.5:\r\n      return 75\r\n    case 2:\r\n      return 70\r\n    case 1.5:\r\n      return 65\r\n    case 1.0:\r\n      return 60\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n","import { StringSet } from './Types'\r\nexport class CourseInfo {\r\n  private addedYear: StringSet\r\n  public examCount: number\r\n\r\n  constructor(\r\n    public name: string,\r\n    public credit: number,\r\n    public score: number,\r\n    public gradePoint: number,\r\n    public initialSemester: string,\r\n    public passSemester: string,\r\n    public examSemesters: Array<string>,\r\n    public examYears: Array<string>,\r\n    public currentState: boolean\r\n  ) {\r\n    this.addedYear = {}\r\n    this.examCount = 0\r\n  }\r\n\r\n  examAtThisYear(year: string) {\r\n    return this.examYears.includes(year)\r\n  }\r\n\r\n  examAtThisSemester(semester: string) {\r\n    return this.examSemesters.includes(semester)\r\n  }\r\n\r\n  passedAtThisSemester(semester: string) {\r\n    return this.passSemester === semester\r\n  }\r\n\r\n  passedAtThisYear(year: string) {\r\n    return year === this.passSemester.slice(0, -2)\r\n  }\r\n\r\n  isPassed() {\r\n    return this.currentState\r\n  }\r\n\r\n  addExamYear(year: string) {\r\n    if (!this.addedYear[year]) {\r\n      this.examYears.push(year)\r\n      this.addedYear[year] = true\r\n    }\r\n  }\r\n\r\n  incrementExamCount() {\r\n    this.examCount += 1\r\n  }\r\n}\r\n","import { StringSet } from './Types'\r\n\r\nexport default class SemestersAndYears {\r\n  public Years: Array<string>\r\n  public Semesters: Array<string>\r\n  private addedYears: StringSet\r\n  private addedSemesters: StringSet\r\n  constructor() {\r\n    this.Years = []\r\n    this.Semesters = []\r\n    this.addedYears = {}\r\n    this.addedSemesters = {}\r\n  }\r\n\r\n  addYear(year: string) {\r\n    if (!this.addedYears[year]) {\r\n      this.Years.push(year)\r\n      this.addedYears[year] = true\r\n    }\r\n  }\r\n\r\n  addSemester(semester: string) {\r\n    if (!this.addedSemesters[semester]) {\r\n      this.Semesters.push(semester)\r\n      this.addedSemesters[semester] = true\r\n    }\r\n  }\r\n}\r\n","export const QUALIFIED = true\r\nexport const UNQUALIFIED = false\r\n","import {\r\n  score2Point,\r\n  level2Point,\r\n  GradePointConvert2Score,\r\n} from './GradePointConverter'\r\nimport { CourseInfo } from './CourseInfo'\r\nimport SemestersAndYears from './SemestersAndYears'\r\nimport { QUALIFIED, UNQUALIFIED } from './constants'\r\nimport { CourseMap } from './Types'\r\n\r\nexport default class processHTMLFile {\r\n  public semestersAndYears: SemestersAndYears\r\n  private addedCourses: CourseMap\r\n  private rawScoreData!: NodeListOf<HTMLTableRowElement>\r\n  constructor(HTMLString: string) {\r\n    this.processHTMLString(HTMLString)\r\n    this.semestersAndYears = new SemestersAndYears()\r\n    this.addedCourses = {}\r\n    this.dataTableToArray()\r\n  }\r\n\r\n  /**\r\n   * get course information\r\n   * @return {*|{}}\r\n   * @constructor\r\n   */\r\n  get Courses() {\r\n    return this.addedCourses\r\n  }\r\n\r\n  getRealCourseName(textContent: string) {\r\n    return textContent\r\n      .replaceAll('\\n', '')\r\n      .replaceAll('\\t', '')\r\n      .replaceAll(' (补考)', '')\r\n      .replaceAll(' (重学)', '')\r\n      .trim()\r\n  }\r\n\r\n  getCleanText(text: string) {\r\n    return text.replaceAll('\\n', '').replaceAll('\\t', '')\r\n  }\r\n\r\n  isReExamCourse(rawCourseName: string) {\r\n    return /补考/.test(rawCourseName)\r\n  }\r\n\r\n  isReStudyCourse(rawCourseName: string) {\r\n    return /重学/.test(rawCourseName)\r\n  }\r\n\r\n  processHTMLString(HTMLString: string) {\r\n    const dom = new DOMParser().parseFromString(HTMLString, 'text/html')\r\n    const dataTable = dom.querySelector('.grid table tbody')\r\n    this.rawScoreData = (dataTable as Element).querySelectorAll('tr')\r\n  }\r\n\r\n  dataTableToArray() {\r\n    this.rawScoreData.forEach((subject) => {\r\n      let info = subject.querySelectorAll('td')\r\n      // get state of a course\r\n      let reExam\r\n      if (info[3].childNodes.length > 1) {\r\n        reExam = this.isReExamCourse(\r\n          this.getCleanText(info[3].childNodes[1].textContent as string)\r\n        )\r\n      }\r\n      // get information of a course\r\n      let name = this.getRealCourseName(\r\n        info[3].childNodes[0].textContent as string\r\n      )\r\n      let semester = this.getCleanText(info[0].textContent as string)\r\n      let credit = parseFloat(this.getCleanText(info[5].textContent as string))\r\n      let score\r\n      let gradePoint\r\n      if (info.length > 13) {\r\n        // if one person has not passed courses, table structure is different from the others\r\n        score = parseInt(this.getCleanText(info[12].textContent as string))\r\n        gradePoint = score2Point(score)\r\n        let level = undefined\r\n        if (isNaN(score)) {\r\n          level = this.getCleanText(info[12].textContent as string)\r\n          gradePoint = level2Point(level)\r\n          score = GradePointConvert2Score(gradePoint)\r\n        }\r\n      } else {\r\n        // others who passed all courses\r\n        score = parseInt(this.getCleanText(info[10].textContent as string))\r\n        gradePoint = score2Point(score)\r\n        let level = undefined\r\n        if (isNaN(score)) {\r\n          level = this.getCleanText(info[10].textContent as string)\r\n          gradePoint = level2Point(level)\r\n          score = GradePointConvert2Score(gradePoint)\r\n        }\r\n      }\r\n\r\n      // year the exam have been taken\r\n      let examYear = semester.slice(0, -2)\r\n      this.semestersAndYears.addYear(examYear)\r\n      this.semestersAndYears.addSemester(semester)\r\n\r\n      // ensure the courses is unique\r\n      // read information about this course for the first time\r\n      if (this.addedCourses[name] === undefined) {\r\n        // successfully passed\r\n        let courseInfo = new CourseInfo(\r\n          name,\r\n          credit,\r\n          score,\r\n          gradePoint,\r\n          semester,\r\n          semester,\r\n          [semester],\r\n          [],\r\n          QUALIFIED\r\n        )\r\n        courseInfo.addExamYear(examYear)\r\n        // the first exam you taken\r\n        courseInfo.incrementExamCount()\r\n\r\n        if (score < 60) {\r\n          courseInfo.currentState = UNQUALIFIED\r\n          courseInfo.passSemester = ''\r\n        }\r\n        if (reExam) courseInfo.incrementExamCount()\r\n\r\n        this.addedCourses[name] = courseInfo\r\n      } else {\r\n        // read information about this course again\r\n        // should add exam DATE information\r\n        this.addedCourses[name].examSemesters.push(semester)\r\n        this.addedCourses[name].addExamYear(examYear)\r\n        // increment the exam count\r\n        this.addedCourses[name].incrementExamCount()\r\n\r\n        // you passed it\r\n        if (score >= 60) {\r\n          this.addedCourses[name].currentState = QUALIFIED\r\n          this.addedCourses[name].passSemester = semester\r\n          this.addedCourses[name].gradePoint = gradePoint\r\n        }\r\n\r\n        // update score\r\n        if (score >= this.addedCourses[name].score) {\r\n          this.addedCourses[name].score = score\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n","import processHTMLFile from './processHTMLFile'\r\nimport { QUALIFIED } from './constants'\r\nimport { CourseMap, ClassifiedCourses, ResultType } from './Types'\r\nimport SemestersAndYears from './SemestersAndYears'\r\nimport { cloneDeep } from 'lodash'\r\n\r\nexport default class GradePointAverage {\r\n  private courses: CourseMap\r\n  public semestersAndYears: SemestersAndYears\r\n  private coursesOfSemesters!: ClassifiedCourses\r\n  private coursesOfYears!: ClassifiedCourses\r\n  constructor(HTMLString: string) {\r\n    let phf = new processHTMLFile(HTMLString)\r\n    this.courses = phf.Courses\r\n    console.log(this.courses)\r\n    this.semestersAndYears = phf.semestersAndYears\r\n    this.classifyCoursesBySemestersAndYears(this.courses)\r\n  }\r\n\r\n  getTotalGPA(courses: CourseMap) {\r\n    let totalCredits = 0\r\n    let totalCreditsMulGradePoint = 0\r\n    for (const name in courses) {\r\n      totalCredits += courses[name].credit\r\n      let gradePoint = courses[name].gradePoint / courses[name].examCount\r\n      if (gradePoint < 1) gradePoint = 1\r\n      totalCreditsMulGradePoint += courses[name].credit * gradePoint\r\n    }\r\n    return totalCreditsMulGradePoint / totalCredits\r\n  }\r\n\r\n  getTotalWAM(courses: CourseMap) {\r\n    let totalCredits = 0\r\n    let totalCreditsMulScore = 0\r\n    for (const name in courses) {\r\n      totalCredits += courses[name].credit\r\n      totalCreditsMulScore += courses[name].credit * courses[name].score\r\n    }\r\n    return totalCreditsMulScore / totalCredits\r\n  }\r\n\r\n  classifyCoursesBySemestersAndYears(courses: CourseMap) {\r\n    const semesters = this.semestersAndYears.Semesters\r\n    const years = this.semestersAndYears.Years\r\n    this.coursesOfSemesters = {}\r\n    this.coursesOfYears = {}\r\n\r\n    for (const semester of semesters) {\r\n      this.coursesOfSemesters[semester] = {}\r\n      for (const name in courses) {\r\n        // exam at this semester\r\n        if (courses[name].examAtThisSemester(semester)) {\r\n          let courseInfo = cloneDeep(courses[name])\r\n          // if qualified and examCount greater than 2\r\n          if (\r\n            courseInfo.currentState === QUALIFIED &&\r\n            courseInfo.examCount > 2\r\n          ) {\r\n            if (!courseInfo.passedAtThisSemester(semester)) {\r\n              courseInfo.gradePoint = 0\r\n            }\r\n          }\r\n          this.coursesOfSemesters[semester][courseInfo.name] = courseInfo\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const year of years) {\r\n      this.coursesOfYears[year] = {}\r\n      for (const name in courses) {\r\n        // exam at this year\r\n        if (courses[name].examAtThisYear(year)) {\r\n          let courseInfo = cloneDeep(courses[name])\r\n          // if qualified and examCount greater than 2\r\n          if (\r\n            courseInfo.currentState === QUALIFIED &&\r\n            courseInfo.examCount > 2\r\n          ) {\r\n            if (!courseInfo.passedAtThisYear(year)) {\r\n              courseInfo.gradePoint = 0\r\n            }\r\n          }\r\n          this.coursesOfYears[year][courseInfo.name] = courseInfo\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get gpaAndWAM() {\r\n    let result: ResultType = {\r\n      gpa: 0,\r\n      wam: 0,\r\n      bySemester: [],\r\n      byYear: [],\r\n    }\r\n    result.byYear = []\r\n    result.bySemester = []\r\n    result.gpa = this.getTotalGPA(this.courses)\r\n    result.wam = this.getTotalWAM(this.courses)\r\n    for (const semester in this.coursesOfSemesters) {\r\n      result.bySemester.push({\r\n        semesterName: semester.replaceAll(' 1', ' 秋').replaceAll(' 2', ' 春'),\r\n        gpa: this.getTotalGPA(this.coursesOfSemesters[semester]),\r\n        wam: this.getTotalWAM(this.coursesOfSemesters[semester]),\r\n      })\r\n    }\r\n    for (const year in this.coursesOfYears) {\r\n      result.byYear.push({\r\n        year,\r\n        gpa: this.getTotalGPA(this.coursesOfYears[year]),\r\n        wam: this.getTotalWAM(this.coursesOfYears[year]),\r\n      })\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport './index.css'\r\nimport GradePointAverage from '../../utils/GPA'\r\nimport { ResultType } from '../../utils/Types'\r\n\r\ninterface FRCprops {\r\n  setGPAData: React.Dispatch<React.SetStateAction<ResultType>>\r\n}\r\n\r\nconst FileReaderComponent: React.FC<FRCprops> = ({ setGPAData }) => {\r\n  const [fileInfo, setFileInfo] = useState({\r\n    name: '',\r\n    size: '',\r\n  })\r\n\r\n  const [loaded, setLoaded] = useState(false)\r\n  const [computed, setComputed] = useState(false)\r\n\r\n  const file = useRef<HTMLInputElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (fileInfo.size !== '') {\r\n      setLoaded(true)\r\n      setComputed(false)\r\n    }\r\n  }, [fileInfo])\r\n\r\n  //   const GPAStat = useContext(AppContext)\r\n\r\n  const calculate = () => {\r\n    if (file.current?.files) {\r\n      if (!file.current.files[0]) {\r\n        alert('请选择文件')\r\n        return\r\n      }\r\n    }\r\n    setComputed(true)\r\n    let fileReader = new FileReader()\r\n    const currentFile = file?.current?.files![0]\r\n    fileReader.readAsText(currentFile as File, 'utf-8')\r\n    fileReader.onloadend = function (evt) {\r\n      // 在文件读取完毕后，其内容将被保存在result属性中\r\n      const content = evt.target!.result\r\n      try {\r\n        const gpa = new GradePointAverage(content as string)\r\n        setGPAData(gpa.gpaAndWAM)\r\n      } catch (error) {\r\n        alert('文件格式错误或内容异常，请重新选择')\r\n        console.log(error)\r\n        setComputed(false)\r\n        setLoaded(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={'fileReader'}>\r\n        <input\r\n          type=\"file\"\r\n          name=\"file\"\r\n          id=\"file\"\r\n          className={'hidden'}\r\n          ref={file}\r\n          onChange={(event) => {\r\n            setFileInfo({\r\n              name: event.target.files![0].name || '',\r\n              size: event.target.files![0].size + ' Bytes' || '',\r\n            })\r\n          }}\r\n        />\r\n        <label htmlFor=\"file\" className={'Btn selectBtn'}>\r\n          选择文件\r\n        </label>\r\n        <label className={'Btn calculateBtn'} onClick={calculate}>\r\n          计算成绩{' '}\r\n        </label>\r\n      </div>\r\n      {loaded ? (\r\n        <div className=\"notice\">\r\n          <p className={'notice-item'}>\r\n            {computed ? '计算结果如下' : '文件已加载'}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FileReaderComponent\r\n","import \"./index.css\"\r\nconst Footer = () => {\r\n  return <>\r\n    <div className={\"footer\"}>\r\n      <p className={\"footer-item\"}>参与制作:</p>\r\n      <p className={\"footer-item\"}>@xcl/软件学院</p>\r\n      <p className={\"footer-item\"}>@ddc/软件学院</p>\r\n      <p className={\"footer-item\"}>@RealmsPro/电子与信息工程学院</p>\r\n    </div>\r\n  </>\r\n}\r\n\r\nexport default Footer\r\n","import React, { useState } from 'react'\nimport ResultList from './components/ResultList'\nimport './App.css'\nimport Header from './components/Header'\nimport FileReader from './components/FileReader'\nimport Footer from './components/Footer'\nimport { ResultType } from './utils/Types'\n\nexport const AppContext = React.createContext<ResultType>({\n  gpa: 0,\n  wam: 0,\n  bySemester: [],\n  byYear: [],\n})\n\nfunction App() {\n  const [gpaData, setGPAData] = useState<ResultType>({\n    gpa: 0,\n    wam: 0,\n    bySemester: [],\n    byYear: [],\n  })\n  // console.log(gpaData)\n  return (\n    <AppContext.Provider value={gpaData}>\n      <div>\n        <Header />\n        <p className={'readme'}>\n          <a href=\"https://gpahelp.xcland.tech/\">使用指北</a>\n        </p>\n        <FileReader setGPAData={setGPAData} />\n        <ResultList />\n        <Footer />\n      </div>\n    </AppContext.Provider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}