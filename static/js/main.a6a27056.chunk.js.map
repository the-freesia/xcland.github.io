{"version":3,"sources":["components/ResultItem/index.jsx","components/ResultList/index.jsx","components/Header/index.jsx","utils/GradePointConverter.js","utils/CourseInfo.js","utils/SemestersAndYears.js","utils/constants.js","utils/processHTMLFile.js","utils/GPA.js","components/FileReader/index.jsx","components/Footer/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ResultItem","props","type","title","gpa","wam","className","ResultList","gpaData","useContext","AppContext","toFixed","undefined","byYear","map","year","bySemester","semester","semesterName","Header","level2Point","level","score2Point","score","GradePointConvert2Score","gradePoint","CourseInfo","name","credit","initialSemester","passSemester","examSemesters","examYears","currentState","this","addedYear","examCount","includes","slice","push","passedAtThisYear","passedAtThisSemester","SemestersAndYears","Years","Semesters","addedYears","addedSemesters","QUALIFIED","processHTMLFile","HTMLString","processHTMLString","semestersAndYears","addedCourses","dataTableToArray","textContent","replaceAll","trim","text","rawCourseName","test","dataTable","DOMParser","parseFromString","querySelector","rawScoreData","querySelectorAll","forEach","subject","reExam","info","childNodes","length","isReExamCourse","getCleanText","getRealCourseName","parseFloat","parseInt","isNaN","examYear","addYear","addSemester","courseInfo","addExamYear","incrementExamCount","GradePointAverage","phf","courses","Courses","classifyCoursesBySemestersAndYears","totalCredits","totalCreditsMulGradePoint","totalCreditsMulScore","semesters","years","coursesOfSemesters","coursesOfYears","examAtThisSemester","deepCloneCourseInfo","examAtThisYear","result","getTotalGPA","getTotalWAM","FileReaderComponent","useState","size","fileInfo","setFileInfo","loaded","setLoaded","computed","setComputed","file","useRef","useEffect","GPAStat","id","ref","onChange","event","target","files","htmlFor","onClick","current","fileReader","FileReader","currentFile","readAsText","onloadend","evt","content","setGPAData","gpaAndWAM","error","alert","console","log","Footer","React","createContext","App","Provider","value","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6a27056.chunk.js","sourcesContent":["import \"./index.css\"\r\n\r\nconst ResultItem = (props) => {\r\n  // console.log(props);\r\n  const {type, title, gpa, wam} = props\r\n  return <div className={\"resultCard\"}>\r\n    <p className={\"item-title\"}>{type}:{title}</p>\r\n    <p className={\"item-gpa\"}>平均绩点: {gpa}</p>\r\n    <p className={\"item-wam\"}>加权平均分: {wam}</p>\r\n  </div>\r\n}\r\n\r\nexport default ResultItem\r\n","import {useContext} from \"react\";\r\nimport {AppContext} from \"../../App\";\r\nimport ResultItem from \"../ResultItem\";\r\nimport \"./index.css\"\r\n\r\n\r\nconst ResultList = (props) => {\r\n  const { gpaData } = useContext(AppContext)\r\n  // console.log(\"Result List\",gpaData)\r\n  return <>\r\n    <div className={\"listContainer\"}>\r\n      {gpaData.gpa !== 0 ? <ResultItem type={\"总计\"} gpa={gpaData.gpa.toFixed(4)} wam={gpaData.wam.toFixed(4)}/> : \"\"}\r\n    </div>\r\n    <div className={\"listContainer\"}>\r\n\r\n      {gpaData.byYear !== undefined ? gpaData.byYear.map(year => {\r\n        return <ResultItem key={year.gpa} type={\"学年\"} title={year.year} gpa={year.gpa.toFixed(4)} wam={year.wam.toFixed(4)}/>\r\n      }) : \"\"}\r\n    </div>\r\n    <div className={\"listContainer\"}>\r\n\r\n      {gpaData.bySemester !== undefined ? gpaData.bySemester.map(semester => {\r\n        return <ResultItem key={semester.gpa} type={\"学期\"} title={semester.semesterName} gpa={semester.gpa.toFixed(4)} wam={semester.wam.toFixed(4)}/>\r\n      }) : \"\"}\r\n    </div>\r\n  </>\r\n}\r\n\r\nexport default ResultList\r\n","import \"./index.css\"\r\n\r\nconst Header = () => {\r\n  return <h1 className={\"header\"}>LNTU GPA Calculator</h1>\r\n}\r\n\r\nexport default Header\r\n","export function level2Point(level) {\r\n    switch (level) {\r\n        case \"优秀\":\r\n            return 4.5;\r\n        case \"良\":\r\n            return 3.5;\r\n        case \"合格\":\r\n            return 3.5;\r\n        case \"中\":\r\n            return 2.5;\r\n        case \"及格\":\r\n            return 1.5;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nexport function score2Point(score) {\r\n    if (score >= 95) {\r\n        return 4.5;\r\n    } else if (score >= 90) {\r\n        return 4.0;\r\n    } else if (score >= 85) {\r\n        return 3.5;\r\n    } else if (score >= 80) {\r\n        return 3.0;\r\n    } else if (score >= 75) {\r\n        return 2.5;\r\n    } else if (score >= 70) {\r\n        return 2.0;\r\n    } else if (score >= 65) {\r\n        return 1.5;\r\n    } else if (score >= 60) {\r\n        return 1.0;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} gradePoint the grade point of levels\r\n * @return {number} target score\r\n */\r\nexport function GradePointConvert2Score(gradePoint) {\r\n    switch (gradePoint) {\r\n        case 4.5:\r\n            return 95\r\n        case 4:\r\n            return 90\r\n        case 3.5:\r\n            return 85\r\n        case 3:\r\n            return 80\r\n        case 2.5:\r\n            return 75\r\n        case 2:\r\n            return 70\r\n        case 1.5:\r\n            return 65\r\n        case 1.0:\r\n            return 60\r\n        default:\r\n            return 0\r\n    }\r\n}","export class CourseInfo {\r\n    /**\r\n     * necessary information of a course\r\n     * @param {string} name course name\r\n     * @param {number} credit course credit\r\n     * @param {number} score course score\r\n     * @param {number} gradePoint course grade point\r\n     * @param {string} initialSemester the semester that course open\r\n     * @param {string} passSemester the semester you passed it\r\n     * @param {string[]} examSemesters Semesters you take exam of this course\r\n     * @param {string[]} examYears Years you take exam of this course\r\n     * @param {boolean} currentState current state of this course Q/F\r\n     */\r\n    constructor(\r\n        name,\r\n        credit,\r\n        score,\r\n        gradePoint,\r\n        initialSemester,\r\n        passSemester,\r\n        examSemesters,\r\n        examYears,\r\n        currentState,\r\n    )\r\n    {\r\n        this.name = name\r\n        this.credit = credit\r\n        this.score = score\r\n        this.gradePoint = gradePoint\r\n        this.initialSemester = initialSemester\r\n        this.passSemester = passSemester\r\n        this.examSemesters = examSemesters\r\n        this.examYears = examYears\r\n        this.currentState = currentState\r\n        this.addedYear = {}\r\n        this.examCount = 1\r\n    }\r\n\r\n    /**\r\n     * query whether you took an exam of this course at that year or not\r\n     * @param {string} year the year you want to query\r\n     * @return {boolean} you took an exam of this course at that year or not\r\n     */\r\n    examAtThisYear(year) {\r\n        return this.examYears.includes(year)\r\n    }\r\n\r\n    /**\r\n     * query whether you took an exam of this course at that semester or not\r\n     * @param {string} semester the semester you want to query\r\n     * @return {boolean} you took an exam of this course at that semester or not\r\n     */\r\n    examAtThisSemester(semester) {\r\n        return this.examSemesters.includes(semester)\r\n    }\r\n\r\n    /**\r\n     * query whether you passed this course at that semester or not\r\n     * @param {string} semester the semester you want to query\r\n     * @return {boolean} you passed this course at that semester or not\r\n     */\r\n    passedAtThisSemester(semester) {\r\n        return this.passSemester === semester\r\n    }\r\n\r\n    /**\r\n     * query whether you passed this course at that semester or not\r\n     * @param {string} year the semester you want to query\r\n     * @return {boolean} you passed this course at that semester or not\r\n     */\r\n    passedAtThisYear(year) {\r\n        return  year === this.passSemester.slice(0, -2)\r\n    }\r\n\r\n    /**\r\n     * @return {boolean} you passed this course or not\r\n     */\r\n    isPassed() {\r\n        return this.currentState\r\n    }\r\n\r\n    /**\r\n     * ensure the exam years are unique\r\n     * @param {string} year\r\n     */\r\n    addExamYear(year) {\r\n        if(!this.addedYear[year]) {\r\n            this.examYears.push(year)\r\n            this.addedYear[year] = true\r\n        }\r\n    }\r\n\r\n    incrementExamCount() {\r\n        this.examCount += 1\r\n    }\r\n\r\n    /**\r\n     * deepClone Current Course INFO\r\n     * @return {{score: number, passSemester: string, gradePoint: number, name: string, initialSemester: number, examYears: *[], examSemesters: *[], credit: number, currentState: boolean, examCount: number}}\r\n     */\r\n    deepCloneCourseInfo() {\r\n        let name = this.name\r\n        let credit = this.credit\r\n        let score = this.score\r\n        let gradePoint = this.gradePoint\r\n        let initialSemester = this.gradePoint\r\n        let passSemester = this.passSemester\r\n        let examSemesters = []\r\n        for(const semester of this.examSemesters) {\r\n            examSemesters.push(semester)\r\n        }\r\n        let examYears = []\r\n        for(const year of this.examYears) {\r\n            examYears.push(year)\r\n        }\r\n        let currentState = this.currentState\r\n        let examCount = this.examCount\r\n\r\n        return {\r\n            name,\r\n            credit,\r\n            score,\r\n            gradePoint,\r\n            initialSemester,\r\n            passSemester,\r\n            examSemesters,\r\n            examYears,\r\n            currentState,\r\n            examCount,\r\n            passedAtThisYear: this.passedAtThisYear,\r\n            passedAtThisSemester: this.passedAtThisSemester\r\n        }\r\n    }\r\n}","export default class SemestersAndYears {\r\n    constructor() {\r\n        this.Years = []\r\n        this.Semesters = []\r\n        this.addedYears = {}\r\n        this.addedSemesters = {}\r\n    }\r\n\r\n    /**\r\n     * add unique years\r\n     * @param {string} year\r\n     */\r\n    addYear(year) {\r\n        if(!this.addedYears[year]) {\r\n            this.Years.push(year)\r\n            this.addedYears[year] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add unique semesters\r\n     * @param {string} semester\r\n     */\r\n    addSemester(semester) {\r\n        if(!this.addedSemesters[semester]) {\r\n            this.Semesters.push(semester)\r\n            this.addedSemesters[semester] = true;\r\n        }\r\n    }\r\n}","export const QUALIFIED = true\r\nexport const UNQUALIFIED = false","import {score2Point, level2Point, GradePointConvert2Score} from \"./GradePointConverter\";\r\nimport {CourseInfo} from \"./CourseInfo\";\r\nimport SemestersAndYears from \"./SemestersAndYears\";\r\nimport {QUALIFIED, UNQUALIFIED} from \"./constants\";\r\n\r\nexport default class processHTMLFile {\r\n    constructor(HTMLString) {\r\n        this.processHTMLString(HTMLString)\r\n        this.semestersAndYears = new SemestersAndYears()\r\n        this.addedCourses = {}\r\n        this.dataTableToArray()\r\n    }\r\n\r\n    /**\r\n     * get course information\r\n     * @return {*|{}}\r\n     * @constructor\r\n     */\r\n    get Courses() {\r\n        return this.addedCourses\r\n    }\r\n\r\n    /**\r\n     * delete \\n \\t (补考) (重学)\r\n     * @param {string} textContent\r\n     * @return {string}\r\n     */\r\n    getRealCourseName(textContent) {\r\n        return textContent\r\n            .replaceAll('\\n', '')\r\n            .replaceAll('\\t', '')\r\n            .replaceAll(' (补考)', '')\r\n            .replaceAll(' (重学)', '')\r\n            .trim()\r\n    }\r\n\r\n    /**\r\n     * delete \\n and \\t from text\r\n     * @param {string} text\r\n     * @return {string}\r\n     */\r\n    getCleanText(text) {\r\n        return text\r\n            .replaceAll('\\n', '')\r\n            .replaceAll('\\t', '')\r\n    }\r\n\r\n    /**\r\n     * @param {string} rawCourseName\r\n     * @return {boolean} whether this course is reExam or not\r\n     */\r\n    isReExamCourse(rawCourseName) {\r\n        // console.log(rawCourseName, /补考/.test(rawCourseName))\r\n        return /补考/.test(rawCourseName)\r\n    }\r\n\r\n    /**\r\n     * @param {string} rawCourseName\r\n     * @return {boolean} whether this course is reStudy or not\r\n     */\r\n    isReStudyCourse(rawCourseName) {\r\n        return /重学/.test(rawCourseName)\r\n    }\r\n\r\n    processHTMLString(HTMLString) {\r\n        const dom = new DOMParser().parseFromString(HTMLString, 'text/html')\r\n        const dataTable = dom.querySelector('.grid table tbody')\r\n        this.rawScoreData = dataTable.querySelectorAll('tr')\r\n    }\r\n\r\n    dataTableToArray() {\r\n\r\n        this.rawScoreData.forEach((subject) => {\r\n            let info = subject.querySelectorAll('td')\r\n            // get state of a course\r\n            let reExam\r\n            if(info[3].childNodes.length > 1) {\r\n                reExam = this.isReExamCourse(this.getCleanText(info[3].childNodes[1].textContent))\r\n            }\r\n            // console.log(info[3].childNodes[0].textContent)\r\n            // let reStudy = this.isReStudyCourse(this.getCleanText(info[3].childNodes[0].textContent))\r\n            // get information of a course\r\n            let name = this.getRealCourseName(info[3].childNodes[0].textContent)\r\n            let semester = this.getCleanText(info[0].textContent)\r\n            let credit = parseFloat(this.getCleanText(info[5].textContent))\r\n            let score\r\n            let gradePoint\r\n            if (info.length > 13) {\r\n                // if one person has not passed courses, table structure is different from the others\r\n                score = parseInt(this.getCleanText(info[12].textContent))\r\n                gradePoint = score2Point(score)\r\n                let level = undefined\r\n                if (isNaN(score)) {\r\n                    level = this.getCleanText(info[12].textContent)\r\n                    gradePoint = level2Point(level)\r\n                    score = GradePointConvert2Score(gradePoint)\r\n                }\r\n            } else {\r\n                // others who passed all courses\r\n                score = parseInt(this.getCleanText(info[10].textContent))\r\n                gradePoint = score2Point(score);\r\n                let level = undefined\r\n                if (isNaN(score)) {\r\n                    level = this.getCleanText(info[10].textContent)\r\n                    gradePoint = level2Point(level)\r\n                    score = GradePointConvert2Score(gradePoint)\r\n                }\r\n            }\r\n\r\n            // year the exam have been taken\r\n            let examYear = semester.slice(0, -2)\r\n            this.semestersAndYears.addYear(examYear)\r\n            this.semestersAndYears.addSemester(semester)\r\n            // console.log(examYear, semester)\r\n\r\n            // ensure the courses is unique\r\n            // read information about this course for the first time\r\n            if (this.addedCourses[name] === undefined) {\r\n                // successfully passed\r\n                let courseInfo = new CourseInfo(\r\n                    name,\r\n                    credit,\r\n                    score,\r\n                    gradePoint,\r\n                    semester,\r\n                    semester,\r\n                    [semester],\r\n                    [],\r\n                    QUALIFIED\r\n                )\r\n                courseInfo.addExamYear(examYear);\r\n\r\n                // reExam and passed\r\n                if (reExam && score >= 60) {\r\n                    // console.log(this.getCleanText(info[3].childNodes[0].textContent), reExam)\r\n                    courseInfo.incrementExamCount()\r\n                } else if(!reExam && score < 60) {\r\n                    // you are not passed it but no reExam\r\n                    courseInfo.currentState = UNQUALIFIED\r\n                    courseInfo.passSemester = ''\r\n                } else if(reExam && score < 60) {\r\n                    // you reExam but still not pass this course\r\n                    courseInfo.currentState = UNQUALIFIED\r\n                    courseInfo.passSemester = ''\r\n                    courseInfo.incrementExamCount()\r\n                }\r\n                this.addedCourses[name] = courseInfo\r\n            } else {\r\n                // read information about this course again\r\n                // should add exam DATE information\r\n                this.addedCourses[name].examSemesters.push(semester)\r\n                this.addedCourses[name].addExamYear(examYear)\r\n                // you passed it\r\n                if (score >= 60) {\r\n                    this.addedCourses[name].currentState = QUALIFIED\r\n                    this.addedCourses[name].passSemester = semester\r\n                    this.addedCourses[name].gradePoint = gradePoint\r\n                }\r\n                // increment the exam count\r\n                this.addedCourses[name].incrementExamCount()\r\n                // update score\r\n                if(score >= this.addedCourses[name].score) {\r\n                    this.addedCourses[name].score = score\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n","import processHTMLFile from \"./processHTMLFile\";\r\nimport {QUALIFIED} from \"./constants\";\r\n\r\nexport default class GradePointAverage {\r\n    constructor(HTMLString) {\r\n        let phf = new processHTMLFile(HTMLString)\r\n        this.courses = phf.Courses\r\n        this.semestersAndYears = phf.semestersAndYears\r\n        this.classifyCoursesBySemestersAndYears(this.courses)\r\n    }\r\n\r\n    /**\r\n     * calculate the total gpa of one person\r\n     * @param {processHTMLFile} courses\r\n     * @return {number}\r\n     */\r\n    getTotalGPA(courses) {\r\n        let totalCredits = 0\r\n        let totalCreditsMulGradePoint = 0\r\n        for(const name in courses) {\r\n            totalCredits += courses[name].credit\r\n            let gradePoint = courses[name].gradePoint / courses[name].examCount\r\n            if(gradePoint < 1) gradePoint = 1\r\n            totalCreditsMulGradePoint += courses[name].credit * gradePoint\r\n        }\r\n        return totalCreditsMulGradePoint / totalCredits\r\n    }\r\n\r\n    /**\r\n     * calculate the total wam of one person\r\n     * @param {processHTMLFile.Courses} courses\r\n     * @return {number}\r\n     */\r\n    getTotalWAM(courses) {\r\n        let totalCredits = 0\r\n        let totalCreditsMulScore = 0\r\n        for(const name in courses) {\r\n            totalCredits += courses[name].credit\r\n            totalCreditsMulScore += courses[name].credit * courses[name].score\r\n        }\r\n        return totalCreditsMulScore / totalCredits\r\n    }\r\n\r\n    /**\r\n     * classify courses by Semesters And Years\r\n     * @param {processHTMLFile.Courses} courses\r\n     */\r\n    classifyCoursesBySemestersAndYears(courses) {\r\n        const semesters = this.semestersAndYears.Semesters\r\n        const years = this.semestersAndYears.Years\r\n        this.coursesOfSemesters = {}\r\n        this.coursesOfYears = {}\r\n\r\n        for(const semester of semesters) {\r\n            this.coursesOfSemesters[semester] = []\r\n            for(const name in courses) {\r\n                // exam at this semester\r\n                if(courses[name].examAtThisSemester(semester)) {\r\n                    let courseInfo = courses[name].deepCloneCourseInfo()\r\n                    // if qualified and examCount greater than 2\r\n                    if(courseInfo.currentState === QUALIFIED && courseInfo.examCount > 2) {\r\n                        if(!courseInfo.passedAtThisSemester(semester)) {\r\n                            courseInfo.gradePoint = 0\r\n                        }\r\n                    }\r\n                    // console.log(courseInfo)\r\n                    this.coursesOfSemesters[semester].push(courseInfo)\r\n                }\r\n            }\r\n        }\r\n\r\n        for(const year of years) {\r\n            this.coursesOfYears[year] = []\r\n            for(const name in courses) {\r\n                // exam at this year\r\n                if(courses[name].examAtThisYear(year)) {\r\n                    let courseInfo = courses[name].deepCloneCourseInfo()\r\n                    // if qualified and examCount greater than 2\r\n                    if(courseInfo.currentState === QUALIFIED && courseInfo.examCount > 2) {\r\n                        if(!courseInfo.passedAtThisYear(year)) {\r\n                            courseInfo.gradePoint = 0\r\n                        }\r\n                    }\r\n                    this.coursesOfYears[year].push(courseInfo)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    get gpaAndWAM() {\r\n        let result = {}\r\n        result.byYear = []\r\n        result.bySemester = []\r\n        result.gpa = this.getTotalGPA(this.courses)\r\n        result.wam = this.getTotalWAM(this.courses)\r\n        for (const semester in this.coursesOfSemesters) {\r\n            result.bySemester.push({\r\n                semesterName: semester.replaceAll(' 1', ' 秋').replaceAll(' 2', ' 春'),\r\n                gpa: this.getTotalGPA(this.coursesOfSemesters[semester]),\r\n                wam: this.getTotalWAM(this.coursesOfSemesters[semester])\r\n            })\r\n        }\r\n        for (const year in this.coursesOfYears) {\r\n            result.byYear.push({\r\n                year,\r\n                gpa: this.getTotalGPA(this.coursesOfYears[year]),\r\n                wam: this.getTotalWAM(this.coursesOfYears[year]),\r\n            })\r\n        }\r\n        return result\r\n    }\r\n}","import {useContext, useEffect, useRef, useState} from \"react\";\r\nimport \"./index.css\"\r\nimport GradePointAverage from \"../../utils/GPA\";\r\nimport {AppContext} from \"../../App\";\r\n\r\nconst FileReaderComponent = () => {\r\n\r\n    const [fileInfo, setFileInfo] = useState({\r\n        name: \"\",\r\n        size: 0\r\n    })\r\n\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [computed, setComputed] = useState(false)\r\n\r\n    const file = useRef(-1)\r\n\r\n    useEffect(() => {\r\n        if (fileInfo.size) {\r\n            setLoaded(true)\r\n            setComputed(false)\r\n        }\r\n    }, [fileInfo])\r\n\r\n    const GPAStat = useContext(AppContext)\r\n\r\n    const calculate = () => {\r\n        if (!file.current.files[0]) {\r\n            alert(\"请选择文件\")\r\n            return\r\n        }\r\n        setComputed(true)\r\n        let fileReader = new FileReader()\r\n        const currentFile = file.current.files[0]\r\n        fileReader.readAsText(currentFile, 'utf-8')\r\n        fileReader.onloadend = function (evt) {\r\n            // 在文件读取完毕后，其内容将被保存在result属性中\r\n            const content = evt.target.result\r\n            try {\r\n                const gpa = new GradePointAverage(content)\r\n                GPAStat.setGPAData(gpa.gpaAndWAM)\r\n            } catch (error) {\r\n                alert(\"文件格式错误或内容异常，请重新选择\")\r\n                console.log(error)\r\n                setComputed(false)\r\n                setLoaded(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <div className={\"fileReader\"}>\r\n            <input type=\"file\" name=\"file\" id=\"file\" className={\"hidden\"} ref={file} onChange={(event) => {\r\n                setFileInfo({\r\n                    name: event.target.files[0].name || \"\",\r\n                    size: event.target.files[0].size + \" Bytes\" || 0\r\n                })\r\n            }\r\n            }/>\r\n            <label htmlFor=\"file\" className={\"Btn selectBtn\"}>选择文件</label>\r\n            <label className={\"Btn calculateBtn\"} onClick={calculate}>计算成绩 </label>\r\n        </div>\r\n        {loaded ? <div className=\"notice\">\r\n            <p className={\"notice-item\"}>{computed ? \"计算结果如下\" : \"文件已加载\"}</p>\r\n        </div> : \"\"}\r\n    </>\r\n}\r\n\r\nexport default FileReaderComponent\r\n","import \"./index.css\"\r\nconst Footer = () => {\r\n  return <>\r\n    <div className={\"footer\"}>\r\n      <p className={\"footer-item\"}>参与制作:</p>\r\n      <p className={\"footer-item\"}>@xcl/软件学院</p>\r\n      <p className={\"footer-item\"}>@ddc/软件学院</p>\r\n      <p className={\"footer-item\"}>@RealmsPro/电子与信息工程学院</p>\r\n    </div>\r\n  </>\r\n}\r\n\r\nexport default Footer\r\n","import React, {useState} from \"react\";\nimport ResultList from \"./components/ResultList\";\nimport \"./App.css\"\nimport Header from \"./components/Header\";\nimport FileReader from \"./components/FileReader\";\nimport Footer from \"./components/Footer\";\nexport const AppContext = React.createContext({})\n\nfunction App() {\n  const [gpaData, setGPAData] = useState({\n      gpa: 0,\n      wam: 0,\n      bySemester: [],\n      byYear: []\n    })\n  // console.log(gpaData)\n  return <AppContext.Provider value={{gpaData, setGPAData}}>\n    <Header/>\n    <p className={\"readme\"}><a href=\"https://gpahelp.xcland.tech/\">使用指北</a></p>\n    <FileReader/>\n    <ResultList/>\n    <Footer/>\n  </AppContext.Provider>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}